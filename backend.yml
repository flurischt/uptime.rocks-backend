AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Backend for uptime.rocks
Globals:
  Function:
    Runtime: python3.6
    Timeout: 180
    # TODO: cleanup global settings and environment variables
    #MemorySize: 256
    #Handler: index.handler # currently defined for each resource
    Environment:
      Variables:
        TABLE_NAME: !Ref StatusTable
        TOPIC_NAME: !Ref AlertTopic

Resources:
  # /ping API to be called by clients
  PingApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: 2.0
        info:
          title:
            Ref: AWS::StackName
        paths:
          "/ping":
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Ping.Arn}/invocations
              responses: {}

  # handler for /ping API
  Ping:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./code.zip
      Handler: uptime.ping.handler
      Events:
        GetApi:
          Type: Api
          Properties:
            Path: /ping
            Method: GET
            RestApiId:
              Ref: PingApi

  # Scheduler function that asynchronously calls the workers
  CheckScheduler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./code.zip
      Handler: uptime.scheduler.handler
      Policies:
      - Statement: 
        - Effect: Allow
          Action: 
          - lambda:InvokeFunction
          Resource: !Sub ${CheckWorker.Arn}
      - Statement: 
        - Effect: Allow
          Action: 
          - dynamodb:PutItem
          - dynamidb:GetItem
          - dynamodb:Scan
          Resource: !Sub ${StatusTable.Arn}
      Environment:
        Variables:
          WORKER_LAMBDA_NAME: !Ref CheckWorker
      Events:
        Scheduling:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)

  # worker that checks the uptime of a service
  CheckWorker:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./code.zip
      Handler: uptime.worker.handler
      Policies:
      - Statement: 
        - Effect: Allow
          Action: 
          - dynamodb:PutItem
          - dynamodb:GetItem
          Resource: !Sub ${StatusTable.Arn}
      - Statement: 
        - Effect: Allow
          Action: 
          - SNS:Publish
          Resource: !Ref AlertTopic

  # worker that checks the uptime of a service
  AlertHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./code.zip
      Handler: uptime.alerts.handler
      Policies:
      - Statement: 
        - Effect: Allow
          Action: 
          - ses:SendEmail
          Resource: "*"
      #- Statement:
      #  - Effect: Allow
      #    Action:
      #    - sqs:SendMessage
      #    Resource: !Sub ${UnsentAlerts.Arn}
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref AlertTopic
      #DeadLetterQueue:
      #  Type: SQS
      #  TargetArn: !Ref UnsentAlerts.Arn

  # application state in DynamoDB
  StatusTable:
    Type: AWS::Serverless::SimpleTable

  # SNS topic for alerts
  AlertTopic:
    Type: AWS::SNS::Topic

  # Queue to track alerts that have not been sent to the user
  UnsentAlerts:
    Type: AWS::SQS::Queue