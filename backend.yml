AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Backend for uptime.rocks
Globals:
  Function:
    Runtime: python3.6
    Timeout: 180
    # TODO: cleanup global settings and environment variables
    #MemorySize: 256
    #Handler: index.handler # currently defined for each resource
    Environment:
      Variables:
        TABLE_NAME: !Ref StatusTable

Resources:
  # /ping API to be called by clients
  PingApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: 2.0
        info:
          title:
            Ref: AWS::StackName
        paths:
          "/ping":
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Ping.Arn}/invocations
              responses: {}

  # handler for /ping API
  Ping:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./code.zip
      Handler: uptime.ping.handler
      Events:
        GetApi:
          Type: Api
          Properties:
            Path: /ping
            Method: GET
            RestApiId:
              Ref: PingApi

  # Scheduler function that asynchronously calls the workers
  CheckScheduler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./code.zip
      Handler: uptime.scheduler.handler
      Role: !Sub ${CheckSchedulerRole.Arn}
      Environment:
        Variables:
          WORKER_LAMBDA_NAME: !Ref CheckWorker
      #Events: # TODO: enable schedule
      #  Scheduling:
      #    Type: Schedule
      #    Properties:
      #      Schedule: rate(5 minutes)

  # worker that checks the uptime of a service
  CheckWorker:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./code.zip
      Handler: uptime.worker.handler

  # IAM role for allowing the scheduler to invoke the workers
  CheckSchedulerRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
        - Effect: Allow
          Principal: 
            Service: lambda.amazonaws.com
          Action: 
          - sts:AssumeRole
      Path: '/'
      Policies: 
      - PolicyName: logs
        PolicyDocument: 
          Statement: 
          - Effect: Allow
            Action: 
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: lambda
        PolicyDocument: 
          Statement: 
          - Effect: Allow
            Action: 
            - lambda:InvokeFunction
            Resource: !Sub ${CheckWorker.Arn}
      - PolicyName: dynamodb
        PolicyDocument: 
          Statement: 
          - Effect: Allow
            Action: 
            - dynamodb:PutItem
            - dynamidb:GetItem
            - dynamodb:Scan
            Resource: !Sub ${StatusTable.Arn}

  # application state in DynamoDB
  StatusTable:
    Type: AWS::Serverless::SimpleTable