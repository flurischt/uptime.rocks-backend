AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Backend for uptime.rocks
Globals:
  Function:
    Runtime: python3.6
    Timeout: 180
    # TODO: cleanup global settings and environment variables
    #MemorySize: 256
    #Handler: index.handler # currently defined for each resource
    Environment:
      Variables:
        TABLE_NAME: !Ref StatusTable
        TOPIC_NAME: !Ref AlertTopic

Resources:
  #
  # The following topic is used to monitor the application state
  # define the recipient for CloudWatch Alarms here:
  #
  MonitoringTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: monitoring@uptime.rocks
        Protocol: email

  # /ping API to be called by clients
  PingApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: 2.0
        info:
          title:
            Ref: AWS::StackName
        paths:
          "/ping":
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Ping.Arn}/invocations
              responses: {}

  # handler for /ping API
  Ping:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./code.zip
      Handler: uptime.ping.handler
      Events:
        GetApi:
          Type: Api
          Properties:
            Path: /ping
            Method: GET
            RestApiId:
              Ref: PingApi

  # Scheduler function that asynchronously calls the workers
  CheckScheduler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./code.zip
      Handler: uptime.scheduler.handler
      Policies:
      - Statement: 
        - Effect: Allow
          Action: 
          - lambda:InvokeFunction
          Resource: !Sub ${CheckWorker.Arn}
      - Statement: 
        - Effect: Allow
          Action: 
          - dynamodb:PutItem
          - dynamidb:GetItem
          - dynamodb:Scan
          Resource: !Sub ${StatusTable.Arn}
      Environment:
        Variables:
          WORKER_LAMBDA_NAME: !Ref CheckWorker
      Events:
        Scheduling:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)

  # worker that checks the uptime of a service
  CheckWorker:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./code.zip
      Handler: uptime.worker.handler
      Policies:
      - Statement: 
        - Effect: Allow
          Action: 
          - dynamodb:PutItem
          - dynamodb:GetItem
          Resource: !Sub ${StatusTable.Arn}
      - Statement: 
        - Effect: Allow
          Action: 
          - SNS:Publish
          Resource: !Ref AlertTopic

  # worker that checks the uptime of a service
  AlertHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./code.zip
      Handler: uptime.alerts.handler
      Policies:
      - Statement: 
        - Effect: Allow
          Action: 
          - ses:SendEmail
          Resource: "*"
      # actually SAM should create this permission on its own. We'll do it manually to work around
      # the problems described in the DeadLetterQueue section below
      - Statement:
        - Effect: Allow
          Action:
          - sqs:SendMessage
          Resource: !Sub ${UnsentAlerts.Arn}
      Events:
        SNSEvent:
          Type: SNS
          Properties:
            Topic: !Ref AlertTopic
      # If you run into problems when attaching the DeadLetterQueue:
      #  - comment out the DeadLetterQueue definition below.
      #  - then deploy (and therefore give the execution-role the permission "sqs:SendMessage")
      #  - uncomment the definition below and deploy again
      # Source: https://github.com/awslabs/serverless-application-model/issues/217
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt UnsentAlerts.Arn

  # application state in DynamoDB
  StatusTable:
    Type: AWS::Serverless::SimpleTable

  # SNS topic for alerts
  AlertTopic:
    Type: AWS::SNS::Topic

  # Queue to track alerts that have not been sent to the user
  UnsentAlerts:
    Type: AWS::SQS::Queue

  #
  # MONITORING
  # below a couple of cloudwatch alarms that will be sent to the developer
  #
  UnsentAlertsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      Namespace: AWS/SQS
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
      - Name: QueueName
        Value: !GetAtt UnsentAlerts.QueueName
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions: 
      - !Ref MonitoringTopic